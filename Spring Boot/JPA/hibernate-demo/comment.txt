 If you are using Junit version < 5, so you have to use @RunWith(SpringRunner.class) or @RunWith(MockitoJUnitRunner.class) etc.
 If you are using Junit version = 5, so you have to use @ExtendWith(SpringExtension.class) or @ExtendWith(MockitoExtension.class) etc.
 
 
 IMPORTANT about Entity Manager: 
	 as long you are in transaction and you manage something with entityManager 
	 the changes will kept tracked by entityManager as long you are in the transaction   

	 
	 

JPQL Entities <- difference -> SQL Tables
	SELECT c  FROM Course c		-	SELECT * FROM COURSE 

	
	
	
	
	
///////////////////////////////////////////	
	
	public void playingWithEntityManager() {
		
		Course course = new Course("The Myth of Sisyphus");
		em.persist(course);
		Course course2 = new Course("A Country Doctor");
		em.persist(course2);
		
		
		em.flush(); //synchronize the database with our changes so far -> inserts them in them in the database
		
		
		//em.detach(course2);//Clear the persistence context, causing all managed entities to become detached.
		//em.clear(); //detach every entities 
		
		course.setName("A Happy Death");
		course2.setName("Before the Law");
		
		//em.refresh(course);//refresh the entity content from the database, so delete our changes 
		
		
		em.flush();
		
		/*
		 * as long you are in transaction and you manage something with entityManager 
		 * the changes will kept tracked by entityManager as long you are in the transaction 
		 */
	}
	
	
//////////////////////////////////////////
TRANSACTION MANAGEMENT: 

	ACID >>
		A : Atomicity >> all transaction should be successful or none of them 
		
		C : Consistency >> any transaction should leave the whole system in a consistent state 
		
		I : Isolation >> the intermediate state of a transaction is invisible to other transactions as a result, 
			transactions that run concurrently appear to be serialized
			
		D : Durability >> after a transaction successfully completes, changes to data persist and are not undone, 
			even in the event of a system failure
			
			
	Dirty Read
	
	Non Repeatable Read 
	
	Phantom Read
		
	
	