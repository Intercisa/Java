important link: 	swagger UI: http://localhost:8080/swagger-ui.html	


RESTfil Web Services

EXAMPLE: 
	Create a User - POST /users
	Delete a User - Delete /users/1
	Get all Users - GET /users
	Get one Users - GET /users/1


Social Media Application

User -> Posts (One To Many Relation)

-Retrieve all USers	- GET /users
-Create a User 		- POST /users
-Retrieve one User	- GET /users/{id} -> /users/1 		{id} -> pathParameter or pathVariable -> both of those names are valid 
-Delete a User		- DELETE /users/{id} -> /users/1

-Retrieve all posts for a User 	- GET /users/{user_id}/posts
-Create a post for a User		- POST /user/{user_id}/posts
-Retrieve details for a post	- GET /users/{user_id}/posts/{post_id}


TIMESTAMP
if you get a timestamp as a response to Date use: spring.jackson.serialization.write-dates-as-timestamps=false


userResource can be named Controller as well but it's more specific this way

There are a few modifications of HATEOAS in the latest release of Spring HATEOAS 1.0.0:

One of these should work

Option 1 : Spring Boot Release >= 2.2.0

    import org.springframework.hateoas.EntityModel;
    import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
    EntityModel<User> model = new EntityModel<>(user);
    WebMvcLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retrieveAllUsers());
    model.add(linkTo.withRel("all-users"));

Option 2: Older versions

    import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
    import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
    import org.springframework.hateoas.Resource;
    import org.springframework.hateoas.mvc.ControllerLinkBuilder;
     
    Resource<User> resource = new Resource<User>(user);
    ControllerLinkBuilder linkTo = linkTo(methodOn(this.getClass()).retrieveAllUsers());
    resource.add(linkTo.withRel("all-users"));
    return resource;
    
    
Internationalization 

	Configuration: 
		- LocalResolver
			- Default Locale - Locale.US
		- ResourceBundleMessageSource
	Usage
		- Autowire MessageSource
		- @RequestHeader(valuer="Accept-Language", required = false) Locale locale
		- messageSource.getMessage("helloworld.message", null, locale)    
		
application.properties -> spring.messages.basename = messages + Application.java + HelloWorldController.java -> it's not good for UTF-8 encoded chars really 

Content Negotiation 
		applicable for XML -> 
			google it: jackson-dataformat-xml 
    
Swagger - for webservices 

    if facing the problem of incompatibility with HATEOAS and Swagger and found this solution.
		https://stackoverflow.com/questions/58431876/spring-boot-2-2-0-spring-hateoas-startup-issue
		
						<dependency>
				    <groupId>io.springfox</groupId>
				    <artifactId>springfox-swagger2</artifactId>
				    <version>2.9.2</version>
				</dependency>
				<dependency>
				    <groupId>io.springfox</groupId>
				    <artifactId>springfox-swagger-ui</artifactId>
				    <version>2.9.2</version>
				</dependency> 
 
 
 		+
 		
				 		@Configuration
				@EnableSwagger2
				public class SwaggerConfig {
				 
				    @Bean
				    public LinkDiscoverers discoverers() {
				        List<LinkDiscoverer> plugins = new ArrayList<>();
				        plugins.add(new CollectionJsonLinkDiscoverer());
				        return new LinkDiscoverers(SimplePluginRegistry.create(plugins));
				    }
				 
				    @Bean
				    public Docket api(){
				        return new Docket(DocumentationType.SWAGGER_2)
				                .apiInfo(DEFAULT_API_INFO)
						...
				    }
				 
				}
 
	swagger UI: http://localhost:8080/swagger-ui.html	
	

Hal browser bug: 
	
	Correct the classpath of your application so that it contains a single, compatible version of org.springframework.plugin.core.PluginRegistry

I downloaded a project from spring initializr but when I see the pom.xml showing errors on parent tag.

https://stackoverflow.com/questions/56154266/why-does-change-from-spring-boot-version-2-1-4-to-2-1-5-gives-unknown-configurat

Add the following entry <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version> to your pom to fix that issue.

    <properties>
    	...
    	...
    	...
     
        <maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>
    </properties>
     

Other option is to use 2.1.3.RELEASE. //that helped so i downgrading my spring boot  

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
	

Static filtering:
	@JsonIgnore || @JsonIgnoreProperties(value = {"field2"})
	
Dynamic filtering: 
	@JsonFilter("SomeDynamicBeanFilter") watch for the name 
	+
	FilteringController -> dynamic filter 
	
Versoning: 
	BASIC: 
			@GetMapping("v1/person")
	just use different url: v1 -> v2 
			@GetMapping("v2/person")
	
	etc -> PersonVersoningController
	
	
Basic Authentication:
	after u added spring security to pom.xml->
	
		application.properties:
			spring.security.user.name=username
			spring.security.user.password=password
			
			
			
SQL -> in sql files you can never use "" ONLY '' !!!!! 