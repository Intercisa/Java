cpp:


class Solution {
public:
    /**
     * 1. keep track of accumulated 1s at each point.
     * 2. at each point, if there is more 1s than 0s, we call it an one-overflow;
     * 3. if no previous record, record the position where this overflow happend;
     * 4. if there is previous record, cut off sub-array where that overflow first occur will give you the even 2nd part;
     */
    int findMaxLength(vector<int>& nums) {
        int maxsize = 0;
        int ones = 0;

        map<int, int> map;
        map[0] = -1;
        for (int i = 0; i < nums.size(); i++) {
            ones += nums[i];
            int overflow = ones - (i + 1 - ones);
            if (map.count(overflow)) {
                maxsize = max(maxsize, i - map[overflow]);
            }
            else {
                map[overflow] = i;
            }
        }

        return maxsize;
    }
};