java: 

public boolean backspaceCompare(String S, String T) {
    int i = S.length()-1;
    int j = T.length()-1;
 
    while(i>=0 || j>=0){
        int c1=0;
        while(i>=0 && (c1>0 || S.charAt(i)=='#')){
            if(S.charAt(i)=='#'){
                c1++;
            }else{
                c1--;
            }
 
            i--;
        }
 
        int c2=0;
        while(j>=0 && (c2>0 || T.charAt(j)=='#')){
            if(T.charAt(j)=='#'){
                c2++;
            }else{
                c2--;
            }
 
            j--;
        }
 
        if(i>=0 && j>=0){
            if(S.charAt(i)!=T.charAt(j)){
                return false;
            }else{
                i--;
                j--;
            }
        }else{
            if(i>=0 || j>=0){
                return false;
            }
        }
    }
 
    return i<0 && j<0;
}


c++:

class Solution {
public:
bool backspaceCompare(string S, string T) {
   
        return stackStr(S)==stackStr(T);
    }
    
    private:
    
    string stackStr(string str){
       string sf="";
        
        for(int i=0;i<str.length();i++){
            if(sf.empty()&& str[i]=='#')
                continue;
            if(str[i]=='#')
                sf.pop_back();
            else
                sf+=str[i];
        }
        return sf;
    }
    
};